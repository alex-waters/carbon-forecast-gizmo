{"version":3,"sources":["carbon-intensity-widget.js"],"names":["document","window","undefined","leadingZero","n","createBanding","amount","number","colour","letter","placeholderWrapper","style","target","className","placeholders","width","querySelector","maxWidth","innerHTML","a","boxHeight","appendChild","template","setAttributeNS","data","lowest","plugTemplate","message","time","createTextNode","tomorrowCounter","b","thisHour","previousHour","svg","moment","day","createElement","format","to","tz","length","highest","from","parentElement","borderLeft","dayText","c","e","console","warn","error","intensity","average","backgroundColor","banding","carbonForecasts","getElementsByClassName","top","start","end","timeFormat","duration","timeBlock","fill","color","getAttribute","timeInUTC","i","localHour","createPlaceholders","request","XMLHttpRequest","status","response","parse","responseText","startOf","UTCHour","send","parseInt","roundedHour","add","open","onreadystatechange","this","readyState","JSON","populatePlaceholders","_loop"],"mappings":"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","file":"carbon-intensity-widget.js","sourcesContent":["(function(document, window, undefined) {\r\n\r\n    let leadingZero = function (n) {\r\n        return (n < 10) ? (\"0\" + n) : n;\r\n    };\r\n\r\n    let createBanding = function(amount) {\r\n         if ( amount > 400) {\r\n            return {\r\n                colour: '#EE3350',\r\n                number: 8,\r\n                letter: 'VH'\r\n            };\r\n        }\r\n        else if ( amount > 300) {\r\n            return {\r\n                colour: '#F89834',\r\n                number: 6,\r\n                letter: 'H'\r\n            };\r\n        }\r\n        else if ( amount > 200) {\r\n            return {\r\n                colour: '#FFE600   ',\r\n                number: 4,\r\n                letter: 'M'\r\n            };\r\n        }\r\n        else if ( amount > 100) {\r\n            return {\r\n                colour: '#74C050',\r\n                number: 2,\r\n                letter: 'L'\r\n            };\r\n        }\r\n        else if ( amount > 0) {\r\n            return {\r\n                colour: '#74C050',\r\n                number: 0,\r\n                letter: 'VL'\r\n            };\r\n        }\r\n    };\r\n\r\n    let todayOrTomorrow = (time) => {\r\n        let tomorrow = moment().endOf('day');\r\n        if (moment(time).isSameOrBefore(tomorrow)) {\r\n            return 'today';\r\n        }\r\n        else {\r\n            return 'tomorrow';\r\n        }\r\n    };\r\n\r\n    let createPlaceholders = function(target, amount) {\r\n        let placeholderWrapper = document.createElement('section');\r\n            placeholderWrapper.className = 'wrapper';\r\n            placeholderWrapper.style.width = ( (7 * amount) * 16 ) + 'px';\r\n            document.querySelector('.logos').style.maxWidth = ( (7 * amount) * 16 ) + 'px';\r\n\r\n        let placeholders = '';\r\n\r\n        for (let a = 0; a < amount; a++) {\r\n            placeholders +=\r\n                `<div class=\"hour\">\r\n                    <p class=\"timestamp\"><time></time></p>\r\n                    <svg class=\"inactive icon--house\" width=\"149\" height=\"146\" viewBox=\"0 0 149 146\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M26 53.196L3 77h23v66h98V77h22L74.5 3 44 34.566V16H26v37.196z\" stroke=\"#676767\" stroke-width=\"7\" fill=\"rgba(255,255,255,1)\" fill-rule=\"evenodd\" stroke-linejoin=\"round\">\r\n                            <title>House</title>\r\n                        </path>\r\n                        <text x=\"59\" y=\"105\" font-family=\"'Open Sans', sans-serif\" font-size=\"40\" fill=\"#000\"></text>\r\n                    </svg>\r\n                </div>`;\r\n        }\r\n        placeholderWrapper.innerHTML += placeholders;\r\n        target.appendChild(placeholderWrapper);\r\n    };\r\n\r\n    let populatePlaceholders = function(target, data) {\r\n        let svg = target.querySelectorAll('svg');\r\n        let time = target.querySelectorAll('time');\r\n        let highest = 'uninitiated';\r\n        let lowest = 'uninitiated';\r\n\r\n        let plugTemplate = function(colour, message) {\r\n            let boxWidth = 49;\r\n            let boxHeight = 59;\r\n            let template = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\r\n\r\n                template.setAttributeNS (null, 'viewBox', '0 0 ' + boxWidth + ' ' + boxHeight);\r\n                template.setAttributeNS (null, 'width', boxWidth);\r\n                template.setAttributeNS (null, 'height', boxHeight);\r\n                template.setAttributeNS(null, 'class', 'icon--plug');\r\n                template.innerHTML = `<g fill=\"none\" fill-rule=\"evenodd\">\r\n                                        <path d=\"M24.5 59V41.5M14 22V0M36 22V0\" stroke=\"${colour}\" stroke-width=\"9\" fill=\"${colour}\"/>\r\n                                        <path d=\"M.005 16c-.003.166-.005.333-.005.5C0 30.583 10.97 42 24.5 42S49 30.583 49 16.5c0-.167-.002-.334-.005-.5H.005z\" fill=\"${colour}\" />\r\n                                        </g>\r\n                                    </svg>`;\r\n\r\n            return [ template,  document.createTextNode(message) ];\r\n        };\r\n\r\n        for (let b = 0; b < data.length; b++) {\r\n            time[b].appendChild(\r\n                document.createTextNode(\r\n                    moment(data[b].from).tz('Europe/London').format('ha') + ' - ' + moment(data[b].to).tz('Europe/London').format('ha')\r\n                )\r\n            );\r\n        }\r\n\r\n        let tomorrowCounter = false;\r\n        for (let b = 0; b < data.length; b++) {\r\n            // console.log(\r\n            //     data[b].from,\r\n            //     moment(data[b].from).tz('Europe/London').format('YYYYMMDD hh:mm'),\r\n            //     moment(data[b].from).tz('UTC').format('YYYYMMDD hh:mm'),\r\n            //     todayOrTomorrow(data[b].from)\r\n            // );\r\n\r\n            if( b > 0) {\r\n                let thisHour = moment(data[b].from).tz('Europe/London').format('YYYYMMDD');\r\n                let previousHour = moment(data[b - 1].from).tz('Europe/London').format('YYYYMMDD');\r\n                if ( thisHour !== previousHour ) {\r\n                    try {\r\n                        svg[b].parentElement.style.borderLeft = '2px dotted #999';\r\n                        let day = document.createElement('b');\r\n                        let dayText = document.createTextNode( moment(data[b].from).tz('Europe/London').format('dddd') );\r\n                        day.appendChild( dayText );\r\n                        time[b].appendChild(day);\r\n                    }\r\n                    catch(e) {\r\n                        console.warn(e);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let c = 0; c < data.length; c++) {\r\n            try {\r\n                let banding = createBanding(data[c].intensity.average);\r\n\r\n                if (highest === 'uninitiated') {\r\n                    highest = c;\r\n                }\r\n                else if ( data[c].intensity.average > data[highest].intensity.average) {\r\n                    highest = c;\r\n                }\r\n\r\n                if (lowest === 'uninitiated') {\r\n                    lowest = c;\r\n                }\r\n                else if ( data[c].intensity.average < data[lowest].intensity.average) {\r\n                    lowest = c;\r\n                }\r\n\r\n                svg[c].querySelector('path').style.stroke = banding.colour;\r\n                svg[c].querySelector('title').innerHTML = data[c].intensity.average + 'g CO₂ per kWh';\r\n                svg[c].querySelector('text').appendChild(document.createTextNode(banding.letter));\r\n                svg[c].querySelector('text').style.fill = '#676767';\r\n                svg[c].style.top = (9 - banding.number) + 'em';\r\n            }\r\n            catch (error) {\r\n                if (error) {\r\n                    console.warn(error);\r\n                    time[c].appendChild( document.createTextNode(' (Forecast not yet available)') );\r\n                    svg[c].querySelector('text').appendChild(document.createTextNode('?'));\r\n                    svg[c].querySelector('text').style.fill = '#ccc';\r\n                    throw error;\r\n                }\r\n            }\r\n\r\n            time[c].style.color = '#333';\r\n        }\r\n\r\n        time[highest].parentElement.appendChild( plugTemplate('#EE3350', 'Unplug')[0] );\r\n        time[highest].parentElement.appendChild( plugTemplate('#EE3350', 'Unplug')[1] );\r\n        time[lowest].parentElement.appendChild( plugTemplate('#74C050', 'Plug in')[0] );\r\n        time[lowest].parentElement.appendChild( plugTemplate('#74C050', 'Plug in')[1] );\r\n        time[lowest].parentElement.parentElement.style.backgroundColor = '#d6e8ce';\r\n        time[highest].parentElement.parentElement.style.backgroundColor = '#ffd3da';\r\n    };\r\n\r\n    let carbonForecasts = document.getElementsByClassName('carbon-forecast');\r\n\r\n    for (let i = 0; i < carbonForecasts.length; i++) {\r\n        let start;\r\n        let end;\r\n        let timeFormat = 'YYYY-MM-DD\\THH\\:mm';\r\n        let duration;\r\n        let timeBlock = 2;\r\n\r\n        if (carbonForecasts[i].getAttribute('data-duration')) {\r\n            duration = carbonForecasts[i].getAttribute('data-duration');\r\n        }\r\n        else {\r\n            duration = 24;\r\n        }\r\n\r\n        if (duration < 4) {\r\n            duration = 4;\r\n        }\r\n        else if (duration > 48) {\r\n            duration = 48;\r\n        }\r\n\r\n        if (carbonForecasts[i].getAttribute('data-from')) {\r\n            start = moment(carbonForecasts[i].getAttribute('data-from') ).startOf('hour').tz('UTC').format(timeFormat);\r\n        }\r\n        else {\r\n            let timeInUTC = moment().startOf('hour').tz('UTC');\r\n            let timeLocal = moment().startOf('hour').tz('Europe/London');\r\n            let localHour = timeLocal.format('HH');\r\n            let UTCHour = timeInUTC.format('HH');\r\n            let roundedHour;\r\n\r\n            if (parseInt(localHour) % 2 === 0) {\r\n                // is even\r\n                roundedHour = parseInt(UTCHour);\r\n            }\r\n            else {\r\n                // is odd\r\n                roundedHour = parseInt(UTCHour) - 1;\r\n            }\r\n\r\n            start = timeInUTC.format('YYYY-MM-DD\\T') + leadingZero(roundedHour) + ':00';\r\n        }\r\n        end = moment(start).add(duration, 'hours').tz('UTC').format(timeFormat);\r\n        createPlaceholders(carbonForecasts[i], duration / timeBlock);\r\n\r\n        let request = new XMLHttpRequest();\r\n            request.open('GET', `https://k1nehbcl85.execute-api.eu-west-2.amazonaws.com/v1/intensity/stats/${start}/${end}/${timeBlock}`, true);\r\n            request.onreadystatechange = function() {\r\n                if (this.readyState === 4) {\r\n                    if (this.status >= 200 && this.status < 400) {\r\n                        let response = JSON.parse(this.responseText);\r\n                        populatePlaceholders(carbonForecasts[i], response.data);\r\n                    } else {\r\n                        // Error :(\r\n                    }\r\n                }\r\n            };\r\n            request.send();\r\n            request = null;\r\n    }\r\n})(document, window);"]}